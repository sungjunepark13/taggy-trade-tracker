model User {
  id                        String   @id @default(cuid())
  email                     String   @unique
  passwordHash              String
  name                      String?
  isEmailVerified           Boolean  @default(false)
  emailVerificationToken    String?  @unique
  emailVerificationExpiry   DateTime?
  resetPasswordToken        String?  @unique
  resetPasswordExpiry       DateTime?
  lastLoginAt               DateTime?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  household                 Household?

  @@index([email])
  @@index([emailVerificationToken])
  @@index([resetPasswordToken])
}

model Household {
  id           String   @id @default(cuid())
  userId       String   @unique
  filingStatus String   // "MFJ" etc.
  location     String
  riskNote     String?
  sleepScore   Int?
  members      Json     // [{name, age, relation}]
  incomePlan   IncomePlan?
  spendingPlan SpendingPlan?
  debts        Debt[]
  cashPlan     CashPlan?
  homeGoal     HomeGoal?
  retireGoal   RetireGoal?
  policies     Policies?
  scenarios    Scenario[]
  user         User     @relation(fields: [userId], references: [id])
}

model IncomePlan {
  id               String @id @default(cuid())
  householdId      String @unique
  baseAnnualGross  Int
  raiseRatePct     Float
  capAtYear5Gross  Int
  paycheckCadence  String // biweekly
  matchPolicy      Json   // {employeePct, matchPctOfPay}
  household        Household @relation(fields: [householdId], references: [id])
}

model SpendingPlan {
  id              String @id @default(cuid())
  householdId     String @unique
  monthlyAllIn    Int
  categories      Json?  // optional breakdown for zero-based
  household       Household @relation(fields: [householdId], references: [id])
}

model Debt {
  id          String  @id @default(cuid())
  householdId String
  name        String
  balance     Int
  apr         Float
  minPayment  Int
  promoExpiry DateTime?
  archived    Boolean @default(false)
  household   Household @relation(fields: [householdId], references: [id])
}

model CashPlan {
  id               String @id @default(cuid())
  householdId      String @unique
  efTargetMonths   Int
  liquidityRulePct Int
  buckets          Json // [{name:"EF",balance:0},{name:"Earnest",balance:15000}]
  household        Household @relation(fields: [householdId], references: [id])
}

model HomeGoal {
  id                 String @id @default(cuid())
  householdId        String @unique
  priceMin           Int
  priceMax           Int
  downPaymentTarget  Int
  gifted             Boolean
  earnestTargetNow   Int
  closingCostPct     Float // default 0.025
  pitiAssumptions    Json  // {rate, taxPct, insPct, hoa}
  household          Household @relation(fields: [householdId], references: [id])
}

model RetireGoal {
  id                 String @id @default(cuid())
  householdId        String @unique
  targetAge          Int
  targetSpendAnnual  Int
  ips                Json  // {corePct, activePct, startEB:[90,10], laterEB:[80,20]}
  household          Household @relation(fields: [householdId], references: [id])
}

model Policies {
  id           String @id @default(cuid())
  householdId  String @unique
  priorityOrder Json  // ["EF_starter","Debt_Avalanche","EF_full","Down_Payment","Investing"]
  debtOrder     String // "highestAPRFirst"
  household    Household @relation(fields: [householdId], references: [id])
}

model Scenario {
  id            String @id @default(cuid())
  householdId   String
  name          String // "Debt-First" or "Buy-Soon"
  assumptions   Json   // rate shocks, raises on/off, etc.
  outputs       Json   // cached results for charts
  createdAt     DateTime @default(now())
  household     Household @relation(fields: [householdId], references: [id])
}